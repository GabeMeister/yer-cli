package ConfigSetupPage 

import (
	"GabeMeister/yer-cli/analyzer"
	"GabeMeister/yer-cli/presentation/helpers"
	"GabeMeister/yer-cli/utils"
	"fmt"
	"strings"
)

type DuplicateGroupBtnProps struct {
	UngroupedAuthors []string
	OutOfBand        bool
	DuplicateAuthors []analyzer.DuplicateAuthorGroup
}

func getDuplicateAuthorValue(group analyzer.DuplicateAuthorGroup) string {
	return fmt.Sprintf("%s|%s", group.Real, strings.Join(group.Duplicates, ","))
}

templ DuplicateGroupBtn(props DuplicateGroupBtnProps) {
	<div
		id="duplicate-groups-btn"
		if props.OutOfBand {
			hx-swap-oob="true"
		}
		class="flex flex-col items-start gap-3"
	>
		<div class="font-medium">Group Duplicate Authors</div>
		for idx, group := range props.DuplicateAuthors {
			<div class="border border-gray-200 rounded-md p-3" id={ fmt.Sprintf("dup-group-%d", idx) }>
				<div class="flex items-center gap-3">
					<section>
						<div>
							<span class="font-medium">Group:</span> { group.Real }
						</div>
						<div class="text-gray-500">{ strings.Join(group.Duplicates, ", ") }</div>
					</section>
					<section>
						<i
							class="fa-solid fa-xmark text-gray-500 cursor-pointer"
							hx-patch="/duplicate-author-grouping"
							hx-target="#duplicate-groups-btn"
							hx-vals={ utils.MustJSONStringify(
								map[string]string{"dup-group-real-name-to-delete": group.Real}) }
						></i>
					</section>
					<input type="hidden" name="dup-group" value={ helpers.MarshalDuplicateGroup(group) }/>
				</div>
			</div>
		}
		for _, ungroupedAuthor := range props.UngroupedAuthors {
			<input
				type="hidden"
				name="ungrouped-author"
				value={ ungroupedAuthor }
			/>
		}
		<button
			if len(props.UngroupedAuthors) == 0 {
				disabled
			}
			type="button"
			class="btn"
			hx-post="/duplicate-authors-modal"
			hx-target="#modal-root"
			hx-swap="outerHTML"
		>
			+ Add Duplicate
		</button>
	</div>
}
