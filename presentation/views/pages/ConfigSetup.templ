package pages

import (
	"GabeMeister/yer-cli/analyzer"
	"GabeMeister/yer-cli/presentation/views/components"
	"GabeMeister/yer-cli/presentation/views/components/ConfigSetupPage"
	"fmt"
)

type ConfigSetupProps struct {
	Id                    int
	RecapName             string
	RepoPath              string
	Toast                 string
	Year                  int
	MasterBranch          string
	IncludeFileExtensions string
	ExcludeDirs           string
	ExcludeFiles          string
	ExcludeAuthors        string
	UngroupedAuthors      []string
	DuplicateAuthorGroups []analyzer.DuplicateAuthorGroup
	RepoConfigList        []analyzer.RepoConfig
}

templ ConfigSetup(props ConfigSetupProps) {
	@components.Page() {
		<div id="config-setup" class="flex flex-row min-h-screen w-screen">
			<div class="w-64 bg-white-200">
				<h1 class="h1 p-3">{ props.RecapName }</h1>
				for _, config := range props.RepoConfigList {
					<ul class="text-gray-500">
						<li class="p-3 px-6">
							@components.Link(fmt.Sprintf("/add-repo?id=%d", config.Id)) {
								<span
									class="flex gap-2 items-center cursor-pointer"
								>
									<i class="fa-solid fa-database"></i>
									if config.Path != "" {
										<span>{ config.Path }</span>
									} else {
										<span class="font-bold">New Repo</span>
									}
								</span>
							}
						</li>
					</ul>
				}
				@components.Link("/add-repo?new=true") {
					<div class="flex justify-center p-3">
						+ Add Repo
					</div>
				}
			</div>
			<div class="bg-gray-800 flex justify-center items-start min-h-screen py-32 grow">
				<div class="bg-white w-1/3 min-w-[600px] max-w-[750px] p-12 rounded-md">
					<form
						hx-patch="/config-file"
						hx-swap="outerHTML"
						hx-target="#config-setup"
						class="flex flex-col items-start gap-6"
					>
						<div class="flex justify-center w-full">
							<h1 class="h1">Add Repo</h1>
						</div>
						<div class="w-full">
							@ConfigSetupPage.RepoPath(ConfigSetupPage.RepoPathProps{
								RepoPath: props.RepoPath,
							})
						</div>
						<div class="w-full">
							<label for="master-branch-name" class="font-medium">Branch to Analyze</label>
							@ConfigSetupPage.MasterBranchInput(ConfigSetupPage.MasterBranchInputProps{
								Name: props.MasterBranch,
							})
						</div>
						<div class="w-full">
							<label for="include-file-extensions" class="font-medium">File Extensions To Include in Recap</label>
							@ConfigSetupPage.IncludeFileExtensions(ConfigSetupPage.IncludeFileExtensionsProps{
								IncludeFileExtensions: props.IncludeFileExtensions,
							})
						</div>
						<div class="w-full">
							<label for="exclude-files" class="font-medium">Files to Exclude from Recap</label>
							@ConfigSetupPage.ExcludeFiles(ConfigSetupPage.ExcludeFilesProps{
								ExcludeFiles: props.ExcludeFiles,
							})
						</div>
						<div class="w-full">
							<label for="exclude-dirs" class="font-medium">Directories to Exclude from Recap</label>
							@ConfigSetupPage.ExcludeDirs(ConfigSetupPage.ExcludeDirsProps{
								ExcludeDirs: props.ExcludeDirs,
							})
						</div>
						<div
							class="w-full"
						>
							@ConfigSetupPage.DuplicateGroupBtn(ConfigSetupPage.DuplicateGroupBtnProps{
								UngroupedAuthors: props.UngroupedAuthors,
								DuplicateAuthors: props.DuplicateAuthorGroups,
							})
						</div>
						<div
							class="w-full"
						>
							<label for="exclude-authors" class="font-medium">Authors to Exclude from Recap</label>
							@ConfigSetupPage.ExcludeAuthors(ConfigSetupPage.ExcludeAuthorsProps{
								Authors: props.ExcludeAuthors,
							})
						</div>
						<input type="hidden" name="id" value={ fmt.Sprintf("%d", props.Id) }/>
						<button
							class="btn lg w-full"
						>
							Save
							@components.LoadingSpinner()
						</button>
					</form>
				</div>
			</div>
		</div>
		if props.Toast != "" {
			@components.Toast(components.ToastProps{
				Message: props.Toast,
			})
		}
	}
}
