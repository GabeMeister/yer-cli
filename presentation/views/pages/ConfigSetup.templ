package pages

import (
	"GabeMeister/yer-cli/analyzer"
	"GabeMeister/yer-cli/presentation/views/components"
	"GabeMeister/yer-cli/presentation/views/components/ConfigSetupPage"
	"fmt"
	"path/filepath"
)

type ConfigSetupProps struct {
	Id                    int
	RecapName             string
	RepoPath              string
	Toast                 string
	Year                  int
	MasterBranch          string
	IncludeFileExtensions string
	ExcludeDirs           string
	ExcludeFiles          string
	ExcludeAuthors        string
	UngroupedAuthors      []string
	DuplicateAuthorGroups []analyzer.DuplicateAuthorGroup
	RepoConfigList        []analyzer.RepoConfig
	AnalyzeFileBlames     bool
}

templ ConfigSetup(props ConfigSetupProps) {
	@components.Page() {
		<div id="config-setup" class="flex flex-row min-h-screen w-screen">
			<div class="w-72 bg-white-200">
				@ConfigSetupPage.RecapNameDisplay(ConfigSetupPage.RecapNameTextboxProps{
					RecapName: props.RecapName,
				})
				<ul class="text-gray-500">
					for _, config := range props.RepoConfigList {
						<li
							class="p-3 px-6 flex gap-3 justify-between items-center"
							id={ fmt.Sprintf("repo-link-%d", config.Id) }
						>
							@components.Link(fmt.Sprintf("/add-repo?id=%d", config.Id)) {
								<span
									class="flex gap-2 items-center cursor-pointer"
								>
									<i
										class={
											"fa-solid",
											templ.KV("fa-database", config.Id != props.Id),
											templ.KV("fa-gears", config.Id == props.Id),
										}
									></i>
									<span
										class={ templ.KV("font-bold", config.Id == props.Id), templ.KV("italic", config.Path == "") }
									>
										if config.Path != "" {
											{ filepath.Base(config.Path) }
										} else {
											{ "New Repo" }
										}
									</span>
								</span>
							}
							if len(props.RepoConfigList) > 1 {
								<i
									class="fa-solid fa-xmark text-red-400 hover:text-red-500 duration-200 cursor-pointer"
									hx-patch="/repo-config/delete"
									hx-vals={ fmt.Sprintf("{\"id\":\"%d\"}", config.Id) }
									hx-swap="outerHTML"
									hx-target={ fmt.Sprintf("#repo-link-%d", config.Id) }
								></i>
							}
						</li>
					}
				</ul>
				@components.Link("/add-repo?new=true") {
					<div class="flex justify-center p-3">
						+ Add Repo
					</div>
				}
			</div>
			<div class="bg-gray-800 flex flex-col gap-12 justify-center items-center min-h-screen py-32 grow">
				<div class="bg-white w-1/3 min-w-[600px] max-w-[750px] p-12 rounded-md">
					<form
						hx-patch="/config-file"
						hx-swap="outerHTML"
						hx-target="#config-setup"
						class="flex flex-col items-start gap-6"
					>
						<div class="flex justify-center w-full">
							if props.RepoPath == "" {
								<h1 class="h1">Add Repo</h1>
							} else {
								<h1 class="h1">Edit Repo</h1>
							}
						</div>
						<div class="w-full">
							@ConfigSetupPage.RepoPath(ConfigSetupPage.RepoPathProps{
								RepoPath: props.RepoPath,
							})
						</div>
						<div class="w-full">
							<label for="master-branch-name" class="font-medium">Branch to Analyze</label>
							@ConfigSetupPage.MasterBranchInput(ConfigSetupPage.MasterBranchInputProps{
								Name: props.MasterBranch,
							})
						</div>
						<div class="w-full">
							<label for="include-file-extensions" class="font-medium">File Extensions To Include in Recap</label>
							@ConfigSetupPage.IncludeFileExtensions(ConfigSetupPage.IncludeFileExtensionsProps{
								IncludeFileExtensions: props.IncludeFileExtensions,
							})
						</div>
						<div class="w-full">
							<label for="exclude-files" class="font-medium">Files to Exclude from Recap</label>
							@ConfigSetupPage.ExcludeFiles(ConfigSetupPage.ExcludeFilesProps{
								ExcludeFiles: props.ExcludeFiles,
							})
						</div>
						<div class="w-full">
							<label for="exclude-dirs" class="font-medium">Directories to Exclude from Recap</label>
							@ConfigSetupPage.ExcludeDirs(ConfigSetupPage.ExcludeDirsProps{
								ExcludeDirs: props.ExcludeDirs,
							})
						</div>
						<div
							class="w-full"
						>
							@ConfigSetupPage.DuplicateGroupBtn(ConfigSetupPage.DuplicateGroupBtnProps{
								UngroupedAuthors: props.UngroupedAuthors,
								DuplicateAuthors: props.DuplicateAuthorGroups,
							})
						</div>
						<div
							class="w-full"
						>
							<input
								type="checkbox"
								name="analyze-file-blames"
								id="analyze-file-blames"
								checked?={ props.AnalyzeFileBlames }
							/>
							<label
								for="analyze-file-blames"
								class="font-medium"
							>Include Advanced File Analysis for this Repo</label>
						</div>
						<input type="hidden" name="id" value={ fmt.Sprintf("%d", props.Id) }/>
						<button
							class="btn lg w-full"
						>
							Save Repo
							@components.LoadingSpinner()
						</button>
					</form>
				</div>
				@components.Link("/finish-setup") {
					<button class="btn lg green">
						I've Added All Repos, Finish Setup <i class="fa fa-arrow-right"></i>
					</button>
				}
			</div>
		</div>
		if props.Toast != "" {
			@components.Toast(components.ToastProps{
				Message: props.Toast,
			})
		}
	}
}
